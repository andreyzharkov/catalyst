common_hyperparams:
  noise_dim: &noise_dim 16
  n_classes: &n_classes 10
  # ensure the names below are the same as in your runner ("discriminator_train" & "generator_train")
  discriminator_train_phase: &discriminator_train_phase discriminator_train
  generator_train_phase: &generator_train_phase generator_train

model_params:
  _key_value: True
  generator:
    model: SimpleCGenerator
    noise_dim: *noise_dim
    n_classes: *n_classes
  discriminator:
    model: SimpleCDiscriminator
    n_classes: *n_classes


args:
  expdir: "mnist_advanced_gans"
  baselogdir: "./logs/mnist_advanced_gans/vanilla_cgan_onehot"


stages:

  data_params:
    batch_size: 64
    num_workers: 0

  state_params:
    num_epochs: 100
    main_metric: &reduce_metric loss_g
    minimize_metric: True
    batch_consistant_metrics: False

  criterion_params:
    criterion: BCEWithLogitsLoss

  callbacks_params:
    phase_manager:
      callback: PhaseManagerCallback
      # one of "all" (use all callbacks), "same" (same phases as in train)
      valid_mode: "all"
      train_phases:
        *discriminator_train_phase: 1
        *generator_train_phase: 1

    prepare_batch_noise:
      callback: AddBatchNoiseCallback
      noise_shape: *noise_dim

    prepare_targets_onehot:
      callback: OneHotTransformCallback
      n_classes: *n_classes
      target_key: "class_targets"
      one_hot_target_key: "class_targets_one_hot"

    prepare_batch_targets:
      callback: AddRealFakeTargetsCallback

    loss_g:
      _wrapper: &g_train_wrapper
        callback: PhaseBatchWrapperCallback
        active_phases: [*generator_train_phase]
      callback: CriterionCallback
      input_key: "real_targets"
      output_key: "fake_logits"
      prefix: loss_g

    loss_d_real:
      _wrapper: &d_train_wrapper
        callback: PhaseBatchWrapperCallback
        active_phases: [*discriminator_train_phase]
      callback: CriterionCallback
      input_key: "real_targets"
      output_key: "real_logits"
      prefix: loss_d_real
    loss_d_fake:
      _wrapper: *d_train_wrapper
      callback: CriterionCallback
      input_key: "fake_targets"
      output_key: "fake_logits"
      prefix: loss_d_fake
    loss_d:
      _wrapper: *d_train_wrapper
      callback: CriterionAggregatorCallback
      loss_keys: [loss_d_real, loss_d_fake]
      loss_aggregate_fn: "mean"
      prefix: loss_d

    optim_g:
      _wrapper: *g_train_wrapper
      callback: OptimizerCallback
      optimizer_key: generator
      loss_key: loss_g
    optim_d:
      _wrapper: *d_train_wrapper
      callback: OptimizerCallback
      optimizer_key: discriminator
      loss_key: loss_d

    visualizer:
      callback: VisualizationCallback
      output_keys: "fake_data"
      n_row: 5
      max_images: 25

    saver:
      callback: CheckpointCallback

  stage1:

    optimizer_params:
      _key_value: True
      generator:
        optimizer: Adam
        _model: ["generator"]
        lr: 0.0002
      discriminator:
        optimizer: Adam
        _model: ["discriminator"]
        lr: 0.0002
